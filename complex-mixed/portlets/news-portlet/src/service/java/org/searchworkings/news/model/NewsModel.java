/**
 * Copyright (c) 2011 Dutchworks All rights reserved.
 */

package org.searchworkings.news.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.GroupedModel;
import com.liferay.portal.model.WorkflowedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the News service. Represents a row in the &quot;NW_News&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.searchworkings.news.model.impl.NewsModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.searchworkings.news.model.impl.NewsImpl}.
 * </p>
 *
 * @author Dutchworks
 * @see News
 * @see org.searchworkings.news.model.impl.NewsImpl
 * @see org.searchworkings.news.model.impl.NewsModelImpl
 * @generated
 */
public interface NewsModel extends BaseModel<News>, GroupedModel, WorkflowedModel {
    /**
     * Returns the primary key of this news.
     *
     * @return the primary key of this news
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this news.
     *
     * @param primaryKey the primary key of this news
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the uuid of this news.
     *
     * @return the uuid of this news
     */
    @AutoEscape
    public String getUuid();

    /**
     * Sets the uuid of this news.
     *
     * @param uuid the uuid of this news
     */
    public void setUuid(String uuid);

    /**
     * Returns the news ID of this news.
     *
     * @return the news ID of this news
     */
    public long getNewsId();

    /**
     * Sets the news ID of this news.
     *
     * @param newsId the news ID of this news
     */
    public void setNewsId(long newsId);

    /**
     * Returns the group ID of this news.
     *
     * @return the group ID of this news
     */
    public long getGroupId();

    /**
     * Sets the group ID of this news.
     *
     * @param groupId the group ID of this news
     */
    public void setGroupId(long groupId);

    /**
     * Returns the company ID of this news.
     *
     * @return the company ID of this news
     */
    public long getCompanyId();

    /**
     * Sets the company ID of this news.
     *
     * @param companyId the company ID of this news
     */
    public void setCompanyId(long companyId);

    /**
     * Returns the user ID of this news.
     *
     * @return the user ID of this news
     */
    public long getUserId();

    /**
     * Sets the user ID of this news.
     *
     * @param userId the user ID of this news
     */
    public void setUserId(long userId);

    /**
     * Returns the user uuid of this news.
     *
     * @return the user uuid of this news
     * @throws SystemException if a system exception occurred
     */
    public String getUserUuid() throws SystemException;

    /**
     * Sets the user uuid of this news.
     *
     * @param userUuid the user uuid of this news
     */
    public void setUserUuid(String userUuid);

    /**
     * Returns the user name of this news.
     *
     * @return the user name of this news
     */
    @AutoEscape
    public String getUserName();

    /**
     * Sets the user name of this news.
     *
     * @param userName the user name of this news
     */
    public void setUserName(String userName);

    /**
     * Returns the create date of this news.
     *
     * @return the create date of this news
     */
    public Date getCreateDate();

    /**
     * Sets the create date of this news.
     *
     * @param createDate the create date of this news
     */
    public void setCreateDate(Date createDate);

    /**
     * Returns the modified date of this news.
     *
     * @return the modified date of this news
     */
    public Date getModifiedDate();

    /**
     * Sets the modified date of this news.
     *
     * @param modifiedDate the modified date of this news
     */
    public void setModifiedDate(Date modifiedDate);

    /**
     * Returns the status of this news.
     *
     * @return the status of this news
     */
    public int getStatus();

    /**
     * Sets the status of this news.
     *
     * @param status the status of this news
     */
    public void setStatus(int status);

    /**
     * Returns the status by user ID of this news.
     *
     * @return the status by user ID of this news
     */
    public long getStatusByUserId();

    /**
     * Sets the status by user ID of this news.
     *
     * @param statusByUserId the status by user ID of this news
     */
    public void setStatusByUserId(long statusByUserId);

    /**
     * Returns the status by user uuid of this news.
     *
     * @return the status by user uuid of this news
     * @throws SystemException if a system exception occurred
     */
    public String getStatusByUserUuid() throws SystemException;

    /**
     * Sets the status by user uuid of this news.
     *
     * @param statusByUserUuid the status by user uuid of this news
     */
    public void setStatusByUserUuid(String statusByUserUuid);

    /**
     * Returns the status by user name of this news.
     *
     * @return the status by user name of this news
     */
    @AutoEscape
    public String getStatusByUserName();

    /**
     * Sets the status by user name of this news.
     *
     * @param statusByUserName the status by user name of this news
     */
    public void setStatusByUserName(String statusByUserName);

    /**
     * Returns the status date of this news.
     *
     * @return the status date of this news
     */
    public Date getStatusDate();

    /**
     * Sets the status date of this news.
     *
     * @param statusDate the status date of this news
     */
    public void setStatusDate(Date statusDate);

    /**
     * Returns the title of this news.
     *
     * @return the title of this news
     */
    @AutoEscape
    public String getTitle();

    /**
     * Sets the title of this news.
     *
     * @param title the title of this news
     */
    public void setTitle(String title);

    /**
     * Returns the content of this news.
     *
     * @return the content of this news
     */
    @AutoEscape
    public String getContent();

    /**
     * Sets the content of this news.
     *
     * @param content the content of this news
     */
    public void setContent(String content);

    /**
     * Returns the description of this news.
     *
     * @return the description of this news
     */
    @AutoEscape
    public String getDescription();

    /**
     * Sets the description of this news.
     *
     * @param description the description of this news
     */
    public void setDescription(String description);

    /**
     * Returns the display date of this news.
     *
     * @return the display date of this news
     */
    public Date getDisplayDate();

    /**
     * Sets the display date of this news.
     *
     * @param displayDate the display date of this news
     */
    public void setDisplayDate(Date displayDate);

    /**
     * @deprecated Renamed to {@link #isApproved()}
     */
    public boolean getApproved();

    /**
     * Returns <code>true</code> if this news is approved.
     *
     * @return <code>true</code> if this news is approved; <code>false</code> otherwise
     */
    public boolean isApproved();

    /**
     * Returns <code>true</code> if this news is a draft.
     *
     * @return <code>true</code> if this news is a draft; <code>false</code> otherwise
     */
    public boolean isDraft();

    /**
     * Returns <code>true</code> if this news is expired.
     *
     * @return <code>true</code> if this news is expired; <code>false</code> otherwise
     */
    public boolean isExpired();

    /**
     * Returns <code>true</code> if this news is pending.
     *
     * @return <code>true</code> if this news is pending; <code>false</code> otherwise
     */
    public boolean isPending();

    public boolean isNew();

    public void setNew(boolean n);

    public boolean isCachedModel();

    public void setCachedModel(boolean cachedModel);

    public boolean isEscapedModel();

    public Serializable getPrimaryKeyObj();

    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    public ExpandoBridge getExpandoBridge();

    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    public Object clone();

    public int compareTo(News news);

    public int hashCode();

    public CacheModel<News> toCacheModel();

    public News toEscapedModel();

    public String toString();

    public String toXmlString();
}