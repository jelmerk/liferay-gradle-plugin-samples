/**
 * Copyright (c) 2011 Dutchworks All rights reserved.
 */

package org.searchworkings.news.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import org.searchworkings.news.model.News;
import org.searchworkings.news.model.NewsModel;
import org.searchworkings.news.model.NewsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the News service. Represents a row in the &quot;NW_News&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link org.searchworkings.news.model.NewsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NewsImpl}.
 * </p>
 *
 * @author Dutchworks
 * @see NewsImpl
 * @see org.searchworkings.news.model.News
 * @see org.searchworkings.news.model.NewsModel
 * @generated
 */
@JSON(strict = true)
public class NewsModelImpl extends BaseModelImpl<News> implements NewsModel {
    public static final String TABLE_NAME = "NW_News";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "newsId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "status", Types.INTEGER },
            { "statusByUserId", Types.BIGINT },
            { "statusByUserName", Types.VARCHAR },
            { "statusDate", Types.TIMESTAMP },
            { "title", Types.VARCHAR },
            { "content", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "displayDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table NW_News (uuid_ VARCHAR(75) null,newsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,title VARCHAR(75) null,content VARCHAR(75) null,description VARCHAR(75) null,displayDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table NW_News";
    public static final String ORDER_BY_JPQL = " ORDER BY news.displayDate DESC";
    public static final String ORDER_BY_SQL = " ORDER BY NW_News.displayDate DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.org.searchworkings.news.model.News"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.org.searchworkings.news.model.News"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.org.searchworkings.news.model.News"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long UUID_COLUMN_BITMASK = 4L;

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static News toModel(NewsSoap soapModel) {
        News model = new NewsImpl();

        model.setUuid(soapModel.getUuid());
        model.setNewsId(soapModel.getNewsId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setStatus(soapModel.getStatus());
        model.setStatusByUserId(soapModel.getStatusByUserId());
        model.setStatusByUserName(soapModel.getStatusByUserName());
        model.setStatusDate(soapModel.getStatusDate());
        model.setTitle(soapModel.getTitle());
        model.setContent(soapModel.getContent());
        model.setDescription(soapModel.getDescription());
        model.setDisplayDate(soapModel.getDisplayDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<News> toModels(NewsSoap[] soapModels) {
        List<News> models = new ArrayList<News>(soapModels.length);

        for (NewsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.org.searchworkings.news.model.News"));

    public NewsModelImpl() {
    }

    public long getPrimaryKey() {
        return _newsId;
    }

    public void setPrimaryKey(long primaryKey) {
        setNewsId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_newsId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long)primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return News.class;
    }

    public String getModelClassName() {
        return News.class.getName();
    }

    @JSON
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        }
        else {
            return _uuid;
        }
    }

    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    public long getNewsId() {
        return _newsId;
    }

    public void setNewsId(long newsId) {
        _newsId = newsId;
    }

    @JSON
    public long getGroupId() {
        return _groupId;
    }

    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        }
        else {
            return _userName;
        }
    }

    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    public Date getCreateDate() {
        return _createDate;
    }

    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    public int getStatus() {
        return _status;
    }

    public void setStatus(int status) {
        _status = status;
    }

    @JSON
    public long getStatusByUserId() {
        return _statusByUserId;
    }

    public void setStatusByUserId(long statusByUserId) {
        _statusByUserId = statusByUserId;
    }

    public String getStatusByUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
            _statusByUserUuid);
    }

    public void setStatusByUserUuid(String statusByUserUuid) {
        _statusByUserUuid = statusByUserUuid;
    }

    @JSON
    public String getStatusByUserName() {
        if (_statusByUserName == null) {
            return StringPool.BLANK;
        }
        else {
            return _statusByUserName;
        }
    }

    public void setStatusByUserName(String statusByUserName) {
        _statusByUserName = statusByUserName;
    }

    @JSON
    public Date getStatusDate() {
        return _statusDate;
    }

    public void setStatusDate(Date statusDate) {
        _statusDate = statusDate;
    }

    @JSON
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        }
        else {
            return _title;
        }
    }

    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    public String getContent() {
        if (_content == null) {
            return StringPool.BLANK;
        }
        else {
            return _content;
        }
    }

    public void setContent(String content) {
        _content = content;
    }

    @JSON
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        }
        else {
            return _description;
        }
    }

    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    public Date getDisplayDate() {
        return _displayDate;
    }

    public void setDisplayDate(Date displayDate) {
        _columnBitmask = -1L;

        _displayDate = displayDate;
    }

    /**
     * @deprecated {@link #isApproved}
     */
    public boolean getApproved() {
        return isApproved();
    }

    public boolean isApproved() {
        if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
            return true;
        }
        else {
            return false;
        }
    }

    public boolean isDraft() {
        if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
            return true;
        }
        else {
            return false;
        }
    }

    public boolean isExpired() {
        if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
            return true;
        }
        else {
            return false;
        }
    }

    public boolean isPending() {
        if (getStatus() == WorkflowConstants.STATUS_PENDING) {
            return true;
        }
        else {
            return false;
        }
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public News toEscapedModel() {
        if (_escapedModelProxy == null) {
            _escapedModelProxy = (News)ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelProxyInterfaces,
                    new AutoEscapeBeanHandler(this));
        }

        return _escapedModelProxy;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        if (_expandoBridge == null) {
            _expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
                    News.class.getName(), getPrimaryKey());
        }

        return _expandoBridge;
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        getExpandoBridge().setAttributes(serviceContext);
    }

    @Override
    public Object clone() {
        NewsImpl newsImpl = new NewsImpl();

        newsImpl.setUuid(getUuid());
        newsImpl.setNewsId(getNewsId());
        newsImpl.setGroupId(getGroupId());
        newsImpl.setCompanyId(getCompanyId());
        newsImpl.setUserId(getUserId());
        newsImpl.setUserName(getUserName());
        newsImpl.setCreateDate(getCreateDate());
        newsImpl.setModifiedDate(getModifiedDate());
        newsImpl.setStatus(getStatus());
        newsImpl.setStatusByUserId(getStatusByUserId());
        newsImpl.setStatusByUserName(getStatusByUserName());
        newsImpl.setStatusDate(getStatusDate());
        newsImpl.setTitle(getTitle());
        newsImpl.setContent(getContent());
        newsImpl.setDescription(getDescription());
        newsImpl.setDisplayDate(getDisplayDate());

        newsImpl.resetOriginalValues();

        return newsImpl;
    }

    public int compareTo(News news) {
        int value = 0;

        value = DateUtil.compareTo(getDisplayDate(), news.getDisplayDate());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }

        News news = null;

        try {
            news = (News)obj;
        }
        catch (ClassCastException cce) {
            return false;
        }

        long primaryKey = news.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        }
        else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int)getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        NewsModelImpl newsModelImpl = this;

        newsModelImpl._originalUuid = newsModelImpl._uuid;

        newsModelImpl._originalGroupId = newsModelImpl._groupId;

        newsModelImpl._setOriginalGroupId = false;

        newsModelImpl._originalCompanyId = newsModelImpl._companyId;

        newsModelImpl._setOriginalCompanyId = false;

        newsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<News> toCacheModel() {
        NewsCacheModel newsCacheModel = new NewsCacheModel();

        newsCacheModel.uuid = getUuid();

        String uuid = newsCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            newsCacheModel.uuid = null;
        }

        newsCacheModel.newsId = getNewsId();

        newsCacheModel.groupId = getGroupId();

        newsCacheModel.companyId = getCompanyId();

        newsCacheModel.userId = getUserId();

        newsCacheModel.userName = getUserName();

        String userName = newsCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            newsCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            newsCacheModel.createDate = createDate.getTime();
        }
        else {
            newsCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            newsCacheModel.modifiedDate = modifiedDate.getTime();
        }
        else {
            newsCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        newsCacheModel.status = getStatus();

        newsCacheModel.statusByUserId = getStatusByUserId();

        newsCacheModel.statusByUserName = getStatusByUserName();

        String statusByUserName = newsCacheModel.statusByUserName;

        if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
            newsCacheModel.statusByUserName = null;
        }

        Date statusDate = getStatusDate();

        if (statusDate != null) {
            newsCacheModel.statusDate = statusDate.getTime();
        }
        else {
            newsCacheModel.statusDate = Long.MIN_VALUE;
        }

        newsCacheModel.title = getTitle();

        String title = newsCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            newsCacheModel.title = null;
        }

        newsCacheModel.content = getContent();

        String content = newsCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            newsCacheModel.content = null;
        }

        newsCacheModel.description = getDescription();

        String description = newsCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            newsCacheModel.description = null;
        }

        Date displayDate = getDisplayDate();

        if (displayDate != null) {
            newsCacheModel.displayDate = displayDate.getTime();
        }
        else {
            newsCacheModel.displayDate = Long.MIN_VALUE;
        }

        return newsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(33);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", newsId=");
        sb.append(getNewsId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", statusByUserId=");
        sb.append(getStatusByUserId());
        sb.append(", statusByUserName=");
        sb.append(getStatusByUserName());
        sb.append(", statusDate=");
        sb.append(getStatusDate());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", displayDate=");
        sb.append(getDisplayDate());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(52);

        sb.append("<model><model-name>");
        sb.append("org.searchworkings.news.model.News");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>newsId</column-name><column-value><![CDATA[");
        sb.append(getNewsId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusDate</column-name><column-value><![CDATA[");
        sb.append(getStatusDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>displayDate</column-name><column-value><![CDATA[");
        sb.append(getDisplayDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }

    private static ClassLoader _classLoader = News.class.getClassLoader();
    private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
            News.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _newsId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private int _status;
    private long _statusByUserId;
    private String _statusByUserUuid;
    private String _statusByUserName;
    private Date _statusDate;
    private String _title;
    private String _content;
    private String _description;
    private Date _displayDate;
    private transient ExpandoBridge _expandoBridge;
    private long _columnBitmask;
    private News _escapedModelProxy;
}